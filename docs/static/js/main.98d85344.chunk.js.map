{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["KEY","vincenty","lat1","lng1","deg1","s","phi1","phi2","L1","L2","alpha1","U1","sigma","sigma1","formersigma","sigmam","sinalpha","cosalpha2","u2","A","B","C","a","f","b","cnt","doRad","x","Math","PI","radDo","atan","tan","atan2","cos","sin","pow","alert","abs","sqrt","vincentyInv","latitude1","longitude1","latitude2","longitude2","url","fetch","res","json","data","OutputData","azimuth1","geoLength","split","startLat","startLng","endLat","endLng","alpha0","points","lat","lng","heading","console","log","i","nxtLat","nxtLng","push","App","props","consClick","imgs_url","state","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","from","to","viewImgs","uri","query","then","steps","routes","legs","imgs_url_arr","length","start_location","end_location","locs","j","loc","img_url","this","todos","type","onChange","onClick","map","index","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98d85344.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nlet KEY = 'AIzaSyDI8c1xJ4xr9VGlhAmSye4-2fWqQ2Dh_gc'\n\n// function vincenty(latitude1, longitude1, alpha1, s) {\n// \tconst doRad = function (x) { return x / 180 * Math.PI };\n// \tconst radDo = function (x) { return x * 180 / Math.PI };\n// \tconst a = 6378137.0;\n// \tconst f = 1 / 298.257222101;\n// \tconst b = (1 - f) * a; // 6356752.314 \n// \tconst lat1 = doRad(latitude1);\n// \tconst lng1 = doRad(longitude1);\n\n// \tconst U1 = Math.atan((1 - f) * Math.tan(lat1));\n// \tconst sigma1 = Math.atan2(Math.tan(U1), Math.cos(alpha1));\n// \tconst alpha = Math.asin(Math.cos(U1) * Math.sin(alpha1));\n// \tconst a2 = Math.pow(a, 2);\n// \tconst b2 = Math.pow(b, 2);\n// \tconst u2 = Math.pow(Math.cos(alpha), 2) * (a2 - b2) / b2;\n// \tconst A = 1 + (u2 / 16384) * (4096 + u2 * (-768 + u2 * (320 - 175 * u2)));\n// \tconst B = (u2 / 1024) * (256 + u2 * (-128 + u2 * (74 - 47 * u2)));\n// \tconst sigma0 = s / b / A;\n// \tlet sigma = sigma0;\n// \tlet sm2;\n// \tdo {\n// \t\tsm2 = 2 * sigma1 + sigma;\n// \t\tconst x = Math.cos(sigma) * (-1 + 2 * Math.pow(Math.cos(sm2), 2)) - B / 6 * Math.cos(sm2) * (-3 + 4 * Math.pow(Math.sin(sm2), 2)) * (-3 + 4 * Math.pow(Math.cos(sm2), 2));\n// \t\tconst dSigma = B * Math.sin(sigma) * (Math.cos(sm2) + B / 4 * x);\n// \t\tsigma = s / b / A + dSigma;\n// \t} while (Math.abs(sigma - sigma0) > 1e-9);\n\n// \tconst y = Math.sin(U1) * Math.cos(sigma) + Math.cos(U1) * Math.sin(sigma) * Math.cos(alpha1);\n// \tconst x = (1 - f) * Math.pow(Math.pow(Math.sin(alpha), 2) + Math.pow(Math.sin(U1) * Math.sin(sigma) - Math.cos(U1) * Math.cos(sigma) * Math.cos(alpha1), 2), 1 / 2);\n// \tconst lambda = Math.atan2(Math.sin(sigma) * Math.sin(alpha1), Math.cos(U1) * Math.cos(sigma) - Math.sin(U1) * Math.sin(sigma) * Math.cos(alpha1));\n// \tconst C = (f / 16) * Math.pow(Math.cos(alpha), 2) * (4 + f * (4 - 3 * Math.pow(Math.cos(alpha), 2)));\n// \tconst z = Math.cos(sm2) + C * Math.cos(sigma) * (-1 + 2 * Math.pow(Math.cos(sm2), 2));\n// \tconst lng = lambda - (1 - C) * f * Math.sin(alpha) * (sigma + C * Math.sin(sigma) * z);\n// \tconst lat2 = Math.atan2(y, x);\n// \tconst lng2 = lng + lng1;\n// \treturn [radDo(lat2), radDo(lng2)];\n// }\n\nfunction vincenty(lat1, lng1, deg1, s) {\n\t/*\n\t\t\t引数\n\t\t\tp1    : 中心となる点（点１）の緯度・経度（google.maps.LatLngクラス）\n\t\t\tdeg1  : 求める点の方角（真北からの時計回りの角度。北:0、東:90、南：180、西：270）\n\t\t\ts     : 点１からの距離（ｍ）\n\t*/\n\tvar p2                         //求める点（点２）の緯度・経度（google.maps.LatLngクラス）\n\tvar a = 6378137.0;             //長半径（赤道半径）\n\tvar f = 1.0 / 298.257223563;   //扁平率（WGS84）\n\tvar b = a * (1 - f);           //短半径（極半径）\n\tvar phi1, phi2;                 //点１、点２の緯度\n\tvar L1, L2;                     //点１、点２の経度\n\tvar L;                         //点１、点２の経度差\n\tvar alpha1, alpha2;\n\tvar alpha;\n\tvar U1, U2;\n\tvar lambda\n\tvar sigma;\n\tvar sigma1, formersigma;\n\tvar sigmam, deltasigma;\n\tvar epsilon = 1.0e-12;         //計算精度（sigmaの許容誤差）\n\tvar sinalpha, cosalpha2;\n\tvar u2, A, B, C;\n\tvar cnt = 0;\n\tconst doRad = function (x) { return x / 180 * Math.PI };\n\tconst radDo = function (x) { return x * 180 / Math.PI };\n\n\tphi1 = doRad(lat1);\n\tL1 = doRad(lng1);\n\talpha1 = doRad(deg1);\n\n\tU1 = Math.atan((1 - f) * Math.tan(phi1));\n\tsigma1 = Math.atan2(Math.tan(U1), Math.cos(alpha1));\n\tsinalpha = Math.cos(U1) * Math.sin(alpha1);\n\tcosalpha2 = 1 - Math.pow(sinalpha, 2);\n\tu2 = cosalpha2 * ((Math.pow(a, 2) - Math.pow(b, 2)) / Math.pow(b, 2));\n\tA = 1 + u2 / 16384 * (4096 + u2 * (-768 + u2 * (320 - 175 * u2)));\n\tB = u2 / 1024 * (256 + u2 * (-128 + u2 * (74 - 47 * u2)));\n\n\tsigma = s / (b * A);\n\tdo {\n\t\tsigmam = (2 * sigma1 + sigma) / 2;\n\t\tdeltasigma = B * Math.sin(sigma)\n\t\t\t* (Math.cos(2 * sigmam)\n\t\t\t\t+ 1 / 4 * B * (Math.cos(sigma) * (-1 + 2 * Math.pow(Math.cos(2 * sigmam), 2))\n\t\t\t\t\t- 1 / 6 * B * Math.cos(2 * sigmam) * (-3 + 4 * Math.pow(Math.sin(sigma), 2)) * (-3 + 4 * Math.pow(Math.cos(2 * sigmam), 2))));\n\t\tformersigma = sigma;\n\t\tsigma = s / (b * A) + deltasigma;\n\t\tcnt++;\n\t\tif (cnt > 100) {\n\t\t\talert(\"error\");\n\t\t\treturn null;\n\t\t}\n\t} while (Math.abs(sigma - formersigma) > epsilon);\n\n\tphi2 = Math.atan2((Math.sin(U1) * Math.cos(sigma) + Math.cos(U1) * Math.sin(sigma) * Math.cos(alpha1))\n\t\t, ((1 - f) * Math.sqrt(Math.pow(sinalpha, 2) + Math.pow((Math.sin(U1) * Math.sin(sigma) - Math.cos(U1) * Math.cos(sigma) * Math.cos(alpha1)), 2))));\n\tlambda = Math.atan2(Math.sin(sigma) * Math.sin(alpha1), (Math.cos(U1) * Math.cos(sigma) - Math.sin(U1) * Math.sin(sigma) * Math.cos(alpha1)));\n\tC = f / 16 * cosalpha2 * (4 + f * (4 - 3 * cosalpha2));\n\tL = lambda - (1 - C) * f * sinalpha * (sigma + C * Math.sin(sigma) * (Math.cos(2 * sigmam) + C * Math.cos(sigma) * (-1 + 2 * Math.pow(Math.cos(2 * sigmam), 2))));\n\tL2 = L + L1;\n\talpha2 = Math.atan(sinalpha / (-1 * Math.sin(U1) * Math.sin(sigma) + Math.cos(U1) * Math.cos(sigma) * Math.cos(alpha1)));\n\t// p2 = new google.maps.LatLng(radDo(phi2), radDo(L2));\n\tp2 = [radDo(phi2), radDo(L2)];\n\treturn p2;\n}\n\n// function vincentyInv(latitude1, longitude1, latitude2, longitude2) {\n// \tconst doRad = function (x) { return x / 180 * Math.PI };\n// \tconst radDo = function (x) { return x * 180 / Math.PI };\n// \tconst a = 6378137.0;\n// \tconst f = 1 / 298.257222101;\n// \tconst b = (1 - f) * a; // 6356752.314 \n// \tconst lat1 = doRad(latitude1);\n// \tconst lat2 = doRad(latitude2);\n// \tconst lng1 = doRad(longitude1);\n// \tconst lng2 = doRad(longitude2);\n\n// \tconst U1 = Math.atan((1 - f) * Math.tan(lat1));\n// \tconst U2 = Math.atan((1 - f) * Math.tan(lat2));\n// \tconst lng = lng2 - lng1;\n// \tconst lambda0 = lng;\n// \tlet lambda = lambda0;\n// \tlet sigma, alpha, sm2;\n// \tlet count = 0;\n// \tdo {\n// \t\tconst sinSigma = Math.pow(Math.pow(Math.cos(U2) * Math.sin(lambda), 2) + Math.pow(Math.cos(U1) * Math.sin(U2) - Math.sin(U1) * Math.cos(U2) * Math.cos(lambda), 2), 1 / 2);\n// \t\tconst cosSigma = Math.sin(U1) * Math.sin(U2) + Math.cos(U1) * Math.cos(U2) * Math.cos(lambda);\n// \t\tconst sinAlpha = Math.cos(U1) * Math.cos(U2) * Math.sin(lambda) / sinSigma;\n// \t\tconst cos2alpha = 1 - Math.pow(sinAlpha, 2);\n// \t\tlet cosSm2 = cosSigma - 2 * Math.sin(U1) * Math.sin(U2) / cos2alpha;\n// \t\tif (isNaN(cosSm2)) cosSm2 = 0;  // equatorial line: cos2alpha=0 (§6)\n// \t\tconst C = f / 16 * cos2alpha * (4 + f * (4 - 3 * cos2alpha));\n// \t\tlambda = lng + (1 - C) * f * sinAlpha * (sigma + C * sinSigma * (cosSm2 + C * cosSigma * (-1 + 2 * Math.pow(cosSm2, 2))));\n// \t\tsigma = Math.atan2(sinSigma, cosSigma);\n// \t\talpha = Math.asin(sinAlpha);\n// \t\tsm2 = Math.acos(cosSm2);\n// \t\tif (count++ > 10) { break; }\n// \t} while (Math.abs(lambda - lambda0) > 1e-12);\n\n// \tconst a2 = Math.pow(a, 2);\n// \tconst b2 = Math.pow(b, 2);\n// \tconst u2 = Math.pow(Math.cos(alpha), 2) * (a2 - b2) / b2;\n// \tconst A = 1 + u2 / 16384 * (4096 + u2 * (-768 + u2 * (320 - 175 * u2)));\n// \tconst B = u2 / 1024 * (256 + u2 * (-128 + u2 * (74 - 47 * u2)));\n// \tconst x = Math.cos(sigma) * (-1 + 2 * Math.pow(Math.cos(sm2), 2)) - B / 6 * Math.cos(sm2) * (-3 + 4 * Math.pow(Math.sin(sm2), 2)) * (-3 + 4 * Math.pow(Math.cos(sm2), 2));\n// \tconst dSigma = B * Math.sin(sigma) * (Math.cos(sm2) + B / 4 * x);\n// \tconst s = b * A * (sigma - dSigma);\n// \tlet alpha1 = Math.atan2(Math.cos(U2) * Math.sin(lambda), Math.cos(U1) * Math.sin(U2) - Math.sin(U1) * Math.cos(U2) * Math.cos(lambda));\n// \treturn [radDo(alpha1), s];\n// }\n\nasync function vincentyInv(latitude1, longitude1, latitude2, longitude2) {\n\tconst uri = \"http://vldb.gsi.go.jp/sokuchi/surveycalc/surveycalc/bl2st_calc.pl?outputType=json&ellipsoid=bessel\";\n\tconst query = \"&latitude1=\" + latitude1 + \"&longitude1=\" + longitude1 + \"&latitude2=\" + latitude2 + \"&longitude2=\" + longitude2;\n\tconst url = uri + query;\n\n\tconst res = await fetch(url);\n\tconst data = await res.json();\n\treturn [data.OutputData.azimuth1, data.OutputData.geoLength];\n\t// return vincenty(latitude1, longitude1, data.OutputData.azimuth1, data.OutputData.geoLength);\n}\n\nasync function split(startLat, startLng, endLat, endLng) {\n\tconst [alpha0, s] = await vincentyInv(startLat, startLng, endLat, endLng);\n\t// console.log(alpha, s);\n\tlet points = [{ lat: startLat, lng: startLng, heading: alpha0 }];\n\tlet { lat, lng, heading } = points[0];\n\tconsole.log(lat, lng, heading);\n\tconst L = 10;\n\tfor (let i = 0; i * L < s; i++) {\n\t\tconst [nxtLat, nxtLng] = vincenty(lat, lng, heading, L);\n\t\tpoints.push({ lat: nxtLat, lng: nxtLng, heading: heading });\n\t\tlat = nxtLat;\n\t\tlng = nxtLng;\n\t\tconsole.log(lat, lng, heading);\n\t}\n\treturn points;\n}\n\nexport default class App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tfrom: \"\",\n\t\t\tto: \"\",\n\t\t\timgs_url: [],\n\t\t};\n\t}\n\n\tconsClick = () => {\n\t\tconst { imgs_url } = this.state;\n\t\tconsole.log(imgs_url);\n\t}\n\n\thandleChange = (event) => {\n\t\tthis.setState({ [event.target.name]: event.target.value });\n\t}\n\n\thandleSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tthis.setState({\n\t\t\tfrom: \"\",\n\t\t\tto: \"\"\n\t\t});\n\t}\n\n\tviewImgs = (event) => {\n\t\tevent.preventDefault();\n\t\tlet uri = \"https://maps.googleapis.com/maps/api/directions/json?key=\" + KEY;\n\t\tlet query = \"&origin=\" + this.state.from + \"&destination=\" + this.state.to;\n\t\tlet url = uri + query;\n\n\t\tfetch(url)\n\t\t\t.then(res => {\n\t\t\t\treturn res.json();\n\t\t\t})\n\t\t\t.then(async (res) => {\n\t\t\t\tconsole.log(res);\n\t\t\t\tlet steps = res.routes[0].legs[0].steps;\n\n\t\t\t\tlet imgs_url_arr = [];\n\n\t\t\t\tfor (let i = 0; i < steps.length; i++) {\n\t\t\t\t\tlet startLat = steps[i].start_location.lat\n\t\t\t\t\tlet startLng = steps[i].start_location.lng\n\t\t\t\t\tlet endLat = steps[i].end_location.lat\n\t\t\t\t\tlet endLng = steps[i].end_location.lng\n\t\t\t\t\tlet locs = await split(startLat, startLng, endLat, endLng);\n\t\t\t\t\tfor (let j = 0; j < locs.length; j++) {\n\t\t\t\t\t\tlet loc = locs[j].lat + ',' + locs[j].lng;\n\t\t\t\t\t\tlet heading = locs[j].heading;\n\t\t\t\t\t\tlet img_url = 'https://maps.googleapis.com/maps/api/streetview?size=400x400&location=' + loc + '&fov=120&heading=' + heading + '&pitch=10&key=' + KEY;\n\t\t\t\t\t\t// console.log(img_url);\n\t\t\t\t\t\timgs_url_arr.push(img_url);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.setState({\n\t\t\t\t\timgs_url: imgs_url_arr\n\t\t\t\t});\n\n\t\t\t});\n\n\t\t/*\n\t\tlet lat = element.start_location.lat\n\t\tlet lng = element.start_location.lng\n\t\tlet lat = 35.6829696\n\t\tlet lng = 139.7666604\n\n\n\t\tlet loc = lat + ',' + lng\n\t\tlet heading = '0'\n\n\t\t//console.log('緯度:' + lat + ' 経度:' + lng +  ' 方位:' + heading );\n\t\tlet url = 'https://maps.googleapis.com/maps/api/streetview?size=400x400&location=' + loc + '&fov=120&heading=' +  heading + '&pitch=10&key=' + KEY \n\n\t\tthis.setState({\n\t\t\timgs_url : [...imgs_url , url ]\n\t\t});\n\n\t\tconsole.log(imgs_url)\n\t\t*/\n\t}\n\n\n\trender() {\n\t\tconst { todos, imgs_url } = this.state;\n\t\treturn (<div>\n\t\t\t<h1>道すじ見せ太郎</h1>\n\t\t\t<p>From</p>\n\t\t\t<input type=\"text\" name=\"from\" onChange={this.handleChange} value={this.state.from} />\n\t\t\t<p>To</p>\n\t\t\t<input type=\"text\" name=\"to\" onChange={this.handleChange} value={this.state.to} />\n\t\t\t<button onClick={this.viewImgs} >view</button>\n\n\t\t\t<br />\n\n\t\t\t{\n\t\t\t\timgs_url.map((url, index) =>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<img src={url}></img>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\n\n\t\t\t{/* <button onClick={this.consClick} >cons</button> */}\n\n\t\t</div >\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
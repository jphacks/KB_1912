{"version":3,"sources":["app.js","serviceWorker.js","index.js"],"names":["KEY","App","props","onInput","e","setState","name","target","value","addTodo","state","todos","consClick","imgs_url","console","log","viewImgs","fetch","then","res","json","steps","routes","legs","imgs_url_arr","i","length","img_url","start_location","lat","lng","push","removeTodo","index","slice","this","type","onClick","map","todo","key","url","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mOAEIA,EAAM,0CAEWC,E,YAEpB,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAQPC,QAAU,SAACC,GACV,EAAKC,SAAS,CACbC,KAAMF,EAAEG,OAAOC,SAXE,EAenBC,QAAU,WAAO,IAAD,EACS,EAAKC,MAArBC,EADO,EACPA,MAAOL,EADA,EACAA,KACf,EAAKD,SAAS,CACbM,MAAM,GAAD,mBAAMA,GAAN,CAAaL,OAlBD,EAsBnBM,UAAY,WAAO,IACVC,EAAa,EAAKH,MAAlBG,SACRC,QAAQC,IAAIF,IAxBM,EA2BnBG,SAAW,WACW,EAAKN,MAAlBG,SAMNI,MAJQ,4DAA8DjB,EAC1D,0CAIXkB,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAAC,GACJL,QAAQC,IAAII,GAKf,IAJG,IAAIE,EAAQF,EAAIG,OAAO,GAAGC,KAAK,GAAGF,MAEjCG,EAAe,GAEVC,EAAI,EAAIA,EAAIJ,EAAMK,OAASD,IAAK,CAExC,IAIIE,EAAU,0EAJJN,EAAMI,GAAGG,eAAeC,IAElB,IADNR,EAAMI,GAAGG,eAAeE,KAG6D,mCAAoD9B,EACnJc,QAAQC,IAAIY,GACZH,EAAaO,KAAOJ,GAIrB,EAAKtB,SAAS,CACZQ,SAAWW,QAzDI,EAuFnBQ,WAAa,SAACC,GAAW,IAAD,EACC,EAAKvB,MAArBC,EADe,EACfA,MADe,EACRL,KACf,EAAKD,SAAS,CACbM,MAAM,GAAD,mBAAMA,EAAMuB,MAAM,EAAGD,IAArB,YAAgCtB,EAAMuB,MAAMD,EAAQ,QAxF1D,EAAKvB,MAAQ,CACZC,MAAO,GACPL,KAAM,GACNO,SAAW,IALM,E,sEA8FT,IAAD,SACoBsB,KAAKzB,MAAzBC,EADA,EACAA,MAAQE,EADR,EACQA,SAChB,OAAQ,6BACP,2BAAOuB,KAAK,OAAOjC,QAASgC,KAAKhC,UACjC,4BAAQkC,QAASF,KAAK1B,SAAtB,gBACA,4BACCE,EAAM2B,KAAI,SAACC,EAAMN,GAAP,OAAiB,wBAAIO,IAAKP,GACnCM,EACD,4BAAQF,QAAS,WAAQ,EAAKL,WAAWC,KAAzC,qBAKD,4BAAQI,QAASF,KAAKnB,UAAtB,QAEA,6BAECH,EAASyB,KAAI,SAACG,EAAKR,GAAN,OACb,6BACA,yBAAKS,IAAKD,QAKX,4BAAQJ,QAASF,KAAKvB,WAAtB,a,GAxH8B+B,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,iB","file":"static/js/main.1c0ab1b4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nvar KEY = 'AIzaSyDI8c1xJ4xr9VGlhAmSye4-2fWqQ2Dh_gc'\n\nexport default class App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttodos: [],\n\t\t\tname: '' ,\n\t\t\timgs_url : []\n\t\t};\n\t}\n\n\tonInput = (e) => {\n\t\tthis.setState({\n\t\t\tname: e.target.value\n\t\t});\n\t}\n\n\taddTodo = () => {\n\t\tconst { todos, name } = this.state;\n\t\tthis.setState({\n\t\t\ttodos: [...todos, name]\n\t\t});\n\t}\n\n\tconsClick = () => {\n\t\tconst { imgs_url } = this.state;\n\t\tconsole.log(imgs_url)\n\t}\n\n\tviewImgs = () =>{\n\t\tconst { imgs_url } = this.state;\n\n\t\tlet uri = \"https://maps.googleapis.com/maps/api/directions/json?key=\" + KEY;\n    let query = \"&origin=Sannomiya St&destination=KIITO\";\n    let url = uri + query;\n\n    fetch(url)\n    .then(res => {\n      return res.json();\n    })\n    .then(res => {\n      console.log(res);\n      var steps = res.routes[0].legs[0].steps;\n\n\t\t\tvar imgs_url_arr = [];\n\n\t\t\tfor( let i = 0 ; i < steps.length ; i++ ){\n\t\t\t\t\n\t\t\t\tlet lat = steps[i].start_location.lat\n\t\t\t\tlet lng = steps[i].start_location.lng\n\t\t\t\tlet loc = lat + ',' + lng\n\t\t\t\tlet heading = '0'\n\t\t\t\tlet img_url = 'https://maps.googleapis.com/maps/api/streetview?size=400x400&location=' + loc + '&fov=120&heading=' +  heading + '&pitch=10&key=' + KEY \n\t\t\t\tconsole.log(img_url)\n\t\t\t\timgs_url_arr.push(  img_url )\n\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\t\timgs_url : imgs_url_arr \n\t\t\t});\n\n\t\t});\n\n\n\n\t\t/*\n\t\tlet lat = element.start_location.lat\n\t\tlet lng = element.start_location.lng\n\t\tlet lat = 35.6829696\n\t\tlet lng = 139.7666604\n\n\n\t\tlet loc = lat + ',' + lng\n\t\tlet heading = '0'\n\n\t\t//console.log('緯度:' + lat + ' 経度:' + lng +  ' 方位:' + heading );\n\t\tvar url = 'https://maps.googleapis.com/maps/api/streetview?size=400x400&location=' + loc + '&fov=120&heading=' +  heading + '&pitch=10&key=' + KEY \n\n\t\tthis.setState({\n\t\t\timgs_url : [...imgs_url , url ]\n\t\t});\n\n\n\t\tconsole.log(imgs_url)\n\n\t\t*/\n\t}\n\n\tremoveTodo = (index) => {\n\t\tconst { todos, name } = this.state;\n\t\tthis.setState({\n\t\t\ttodos: [...todos.slice(0, index), ...todos.slice(index + 1)]\n\t\t});\n\t}\n\n\trender() {\n\t\tconst { todos , imgs_url} = this.state;\n\t\treturn (<div>\n\t\t\t<input type=\"text\" onInput={this.onInput} />\n\t\t\t<button onClick={this.addTodo} >登録</button>\n\t\t\t<ul>\n\t\t\t{todos.map((todo, index) => <li key={index}>\n\t\t\t\t{todo}\n\t\t\t\t<button onClick={() => { this.removeTodo(index) }}>削除</button>\n\t\t\t\t</li>)}\n\t\t\t</ul>\n\n\n\t\t\t<button onClick={this.viewImgs} >view</button>\n\n\t\t\t<br/>\n\n\t\t\t{imgs_url.map((url, index) => \n\t\t\t\t<div>\n\t\t\t\t<img src={url}></img> \n\t\t\t\t</div>\n\t\t\t)}\n\n\n\t\t\t<button onClick={this.consClick} >cons</button>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}